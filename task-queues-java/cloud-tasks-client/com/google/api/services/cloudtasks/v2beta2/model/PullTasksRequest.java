/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-02-08 11:51:56 PST)
 * on 2017-02-08 at 19:52:26 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.cloudtasks.v2beta2.model;

/**
 * Request message for pulling tasks using CloudTasks.PullTasks.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tasks API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class PullTasksRequest extends com.google.api.client.json.GenericJson {

  /**
   * `filter` can be used to specify a subset of tasks to lease.
   *
   * When `filter` is set to `tag=` then the PullTasksResponse will contain only tasks whose
   * PullTaskTarget.tag is equal to ``. `` can be a bytes encoded as a string and must be less than
   * 500 bytes. If `` includes whitespace or special characters (characters which aren't letters,
   * numbers, or underscores), then it must be double-quoted. Double quotes and backslashes in
   * quoted strings must be escaped by preceding it with a backslash (`\`).
   *
   * When `filter` is set to `tag=oldest_tag()`, only tasks which have the same tag as the task with
   * the oldest schedule_time will be returned.
   *
   * Grammar Syntax:
   *
   * * `filter = "tag=" comparable`
   *
   * *  `comparable = tag | function`
   *
   * * `tag = string | bytes`
   *
   * * `function = "oldest_tag()"`
   *
   * The `oldest_tag()` function returns tasks which have the same tag as the oldest task (ordered
   * by schedule time).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String filter;

  /**
   * The duration of the lease.
   *
   * Each task returned in the PullTasksResponse will have its Task.schedule_time set to the current
   * time plus the `lease_duration`. A task that has been returned in a PullTasksResponse is leased
   * -- that task will not be returned in a different PullTasksResponse before the
   * Task.schedule_time.
   *
   * After the lease holder has successfully finished the work associated with the task, the lease
   * holder must call CloudTasks.AcknowledgeTask. If the task is not acknowledged via
   * CloudTasks.AcknowledgeTask before the Task.schedule_time then it will be returned in a later
   * PullTasksResponse so that another lease holder can process it.
   *
   * The maximum lease duration is 1 week.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private String leaseDuration;

  /**
   * The maximum number of tasks to lease. The maximum that can be requested is 1000.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxTasks;

  /**
   * The response_view specifies which subset of the Task will be returned.
   *
   * By default response_view is Task.View.BASIC; not all information is retrieved by default
   * because some data, such as payloads, might be desirable to return only when needed because of
   * its large size or because of the sensitivity of data that it contains.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.String responseView;

  /**
   * `filter` can be used to specify a subset of tasks to lease.
   *
   * When `filter` is set to `tag=` then the PullTasksResponse will contain only tasks whose
   * PullTaskTarget.tag is equal to ``. `` can be a bytes encoded as a string and must be less than
   * 500 bytes. If `` includes whitespace or special characters (characters which aren't letters,
   * numbers, or underscores), then it must be double-quoted. Double quotes and backslashes in
   * quoted strings must be escaped by preceding it with a backslash (`\`).
   *
   * When `filter` is set to `tag=oldest_tag()`, only tasks which have the same tag as the task with
   * the oldest schedule_time will be returned.
   *
   * Grammar Syntax:
   *
   * * `filter = "tag=" comparable`
   *
   * *  `comparable = tag | function`
   *
   * * `tag = string | bytes`
   *
   * * `function = "oldest_tag()"`
   *
   * The `oldest_tag()` function returns tasks which have the same tag as the oldest task (ordered
   * by schedule time).
   * @return value or {@code null} for none
   */
  public java.lang.String getFilter() {
    return filter;
  }

  /**
   * `filter` can be used to specify a subset of tasks to lease.
   *
   * When `filter` is set to `tag=` then the PullTasksResponse will contain only tasks whose
   * PullTaskTarget.tag is equal to ``. `` can be a bytes encoded as a string and must be less than
   * 500 bytes. If `` includes whitespace or special characters (characters which aren't letters,
   * numbers, or underscores), then it must be double-quoted. Double quotes and backslashes in
   * quoted strings must be escaped by preceding it with a backslash (`\`).
   *
   * When `filter` is set to `tag=oldest_tag()`, only tasks which have the same tag as the task with
   * the oldest schedule_time will be returned.
   *
   * Grammar Syntax:
   *
   * * `filter = "tag=" comparable`
   *
   * *  `comparable = tag | function`
   *
   * * `tag = string | bytes`
   *
   * * `function = "oldest_tag()"`
   *
   * The `oldest_tag()` function returns tasks which have the same tag as the oldest task (ordered
   * by schedule time).
   * @param filter filter or {@code null} for none
   */
  public PullTasksRequest setFilter(java.lang.String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The duration of the lease.
   *
   * Each task returned in the PullTasksResponse will have its Task.schedule_time set to the current
   * time plus the `lease_duration`. A task that has been returned in a PullTasksResponse is leased
   * -- that task will not be returned in a different PullTasksResponse before the
   * Task.schedule_time.
   *
   * After the lease holder has successfully finished the work associated with the task, the lease
   * holder must call CloudTasks.AcknowledgeTask. If the task is not acknowledged via
   * CloudTasks.AcknowledgeTask before the Task.schedule_time then it will be returned in a later
   * PullTasksResponse so that another lease holder can process it.
   *
   * The maximum lease duration is 1 week.
   * @return value or {@code null} for none
   */
  public String getLeaseDuration() {
    return leaseDuration;
  }

  /**
   * The duration of the lease.
   *
   * Each task returned in the PullTasksResponse will have its Task.schedule_time set to the current
   * time plus the `lease_duration`. A task that has been returned in a PullTasksResponse is leased
   * -- that task will not be returned in a different PullTasksResponse before the
   * Task.schedule_time.
   *
   * After the lease holder has successfully finished the work associated with the task, the lease
   * holder must call CloudTasks.AcknowledgeTask. If the task is not acknowledged via
   * CloudTasks.AcknowledgeTask before the Task.schedule_time then it will be returned in a later
   * PullTasksResponse so that another lease holder can process it.
   *
   * The maximum lease duration is 1 week.
   * @param leaseDuration leaseDuration or {@code null} for none
   */
  public PullTasksRequest setLeaseDuration(String leaseDuration) {
    this.leaseDuration = leaseDuration;
    return this;
  }

  /**
   * The maximum number of tasks to lease. The maximum that can be requested is 1000.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxTasks() {
    return maxTasks;
  }

  /**
   * The maximum number of tasks to lease. The maximum that can be requested is 1000.
   * @param maxTasks maxTasks or {@code null} for none
   */
  public PullTasksRequest setMaxTasks(java.lang.Integer maxTasks) {
    this.maxTasks = maxTasks;
    return this;
  }

  /**
   * The response_view specifies which subset of the Task will be returned.
   *
   * By default response_view is Task.View.BASIC; not all information is retrieved by default
   * because some data, such as payloads, might be desirable to return only when needed because of
   * its large size or because of the sensitivity of data that it contains.
   * @return value or {@code null} for none
   */
  public java.lang.String getResponseView() {
    return responseView;
  }

  /**
   * The response_view specifies which subset of the Task will be returned.
   *
   * By default response_view is Task.View.BASIC; not all information is retrieved by default
   * because some data, such as payloads, might be desirable to return only when needed because of
   * its large size or because of the sensitivity of data that it contains.
   * @param responseView responseView or {@code null} for none
   */
  public PullTasksRequest setResponseView(java.lang.String responseView) {
    this.responseView = responseView;
    return this;
  }

  @Override
  public PullTasksRequest set(String fieldName, Object value) {
    return (PullTasksRequest) super.set(fieldName, value);
  }

  @Override
  public PullTasksRequest clone() {
    return (PullTasksRequest) super.clone();
  }

}
