/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2017-02-08 11:51:56 PST)
 * on 2017-02-08 at 19:52:26 UTC 
 * Modify at your own risk.
 */

package com.google.api.services.cloudtasks.v2beta2.model;

/**
 * Throttle config.
 *
 * Thse settings determine the throttling behavior.
 *
 * <p> This is the Java data model class that specifies how to parse/serialize into the JSON that is
 * transmitted over HTTP when working with the Cloud Tasks API. For a detailed explanation see:
 * <a href="https://developers.google.com/api-client-library/java/google-http-java-client/json">https://developers.google.com/api-client-library/java/google-http-java-client/json</a>
 * </p>
 *
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public final class ThrottleConfig extends com.google.api.client.json.GenericJson {

  /**
   * Bucket size limits how fast the queue is processed when many tasks are in the queue and the
   * rate is high. Queues that have bucket_size set, use a "token bucket" algorithm for dequeueing
   * tasks; for more information see the [Wikipedia article on token
   * buckets](https://wikipedia.org/wiki/Token_Bucket)).
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double bucketSize;

  /**
   * The maximum outstanding requests that Cloud Tasks will allow to occur for for this queue. After
   * this threshold has been reached, the system will stop pushing tasks from this queue until the
   * number of outstanding requests decreases. The maximum allowed value is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Integer maxOutstandingRequests;

  /**
   * The maximum rate at which push requests will be sent for tasks on this queue. If this value is
   * not set (or zero) then the default of 5 will be used. The maximum allowed value is 500.
   * The value may be {@code null}.
   */
  @com.google.api.client.util.Key
  private java.lang.Double maxRequestsPerSecond;

  /**
   * Bucket size limits how fast the queue is processed when many tasks are in the queue and the
   * rate is high. Queues that have bucket_size set, use a "token bucket" algorithm for dequeueing
   * tasks; for more information see the [Wikipedia article on token
   * buckets](https://wikipedia.org/wiki/Token_Bucket)).
   * @return value or {@code null} for none
   */
  public java.lang.Double getBucketSize() {
    return bucketSize;
  }

  /**
   * Bucket size limits how fast the queue is processed when many tasks are in the queue and the
   * rate is high. Queues that have bucket_size set, use a "token bucket" algorithm for dequeueing
   * tasks; for more information see the [Wikipedia article on token
   * buckets](https://wikipedia.org/wiki/Token_Bucket)).
   * @param bucketSize bucketSize or {@code null} for none
   */
  public ThrottleConfig setBucketSize(java.lang.Double bucketSize) {
    this.bucketSize = bucketSize;
    return this;
  }

  /**
   * The maximum outstanding requests that Cloud Tasks will allow to occur for for this queue. After
   * this threshold has been reached, the system will stop pushing tasks from this queue until the
   * number of outstanding requests decreases. The maximum allowed value is 500.
   * @return value or {@code null} for none
   */
  public java.lang.Integer getMaxOutstandingRequests() {
    return maxOutstandingRequests;
  }

  /**
   * The maximum outstanding requests that Cloud Tasks will allow to occur for for this queue. After
   * this threshold has been reached, the system will stop pushing tasks from this queue until the
   * number of outstanding requests decreases. The maximum allowed value is 500.
   * @param maxOutstandingRequests maxOutstandingRequests or {@code null} for none
   */
  public ThrottleConfig setMaxOutstandingRequests(java.lang.Integer maxOutstandingRequests) {
    this.maxOutstandingRequests = maxOutstandingRequests;
    return this;
  }

  /**
   * The maximum rate at which push requests will be sent for tasks on this queue. If this value is
   * not set (or zero) then the default of 5 will be used. The maximum allowed value is 500.
   * @return value or {@code null} for none
   */
  public java.lang.Double getMaxRequestsPerSecond() {
    return maxRequestsPerSecond;
  }

  /**
   * The maximum rate at which push requests will be sent for tasks on this queue. If this value is
   * not set (or zero) then the default of 5 will be used. The maximum allowed value is 500.
   * @param maxRequestsPerSecond maxRequestsPerSecond or {@code null} for none
   */
  public ThrottleConfig setMaxRequestsPerSecond(java.lang.Double maxRequestsPerSecond) {
    this.maxRequestsPerSecond = maxRequestsPerSecond;
    return this;
  }

  @Override
  public ThrottleConfig set(String fieldName, Object value) {
    return (ThrottleConfig) super.set(fieldName, value);
  }

  @Override
  public ThrottleConfig clone() {
    return (ThrottleConfig) super.clone();
  }

}
